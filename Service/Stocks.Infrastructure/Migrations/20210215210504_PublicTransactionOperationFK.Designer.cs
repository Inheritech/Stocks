// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stocks.Infrastructure;

namespace Stocks.Infrastructure.Migrations
{
    [DbContext(typeof(StocksContext))]
    [Migration("20210215210504_PublicTransactionOperationFK")]
    partial class PublicTransactionOperationFK
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.HasSequence("AccountsSequence", "Stocks")
                .IncrementsBy(10);

            modelBuilder.HasSequence("StockBalancesSequence", "Stocks")
                .IncrementsBy(10);

            modelBuilder.HasSequence("TransactionsSequence", "Stocks")
                .IncrementsBy(10);

            modelBuilder.Entity("Stocks.Domain.Aggregates.AccountAggregate.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "AccountsSequence")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "Stocks")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("Cash")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Accounts", "Stocks");
                });

            modelBuilder.Entity("Stocks.Domain.Aggregates.AccountAggregate.StockBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "StockBalancesSequence")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "Stocks")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SharePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Shares")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("StockBalances", "Stocks");
                });

            modelBuilder.Entity("Stocks.Domain.Aggregates.TransactionAggregate.Operation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Operation", "Stocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Buy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sell"
                        });
                });

            modelBuilder.Entity("Stocks.Domain.Aggregates.TransactionAggregate.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "TransactionsSequence")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "Stocks")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<decimal>("SharePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Shares")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("Transactions", "Stocks");
                });

            modelBuilder.Entity("Stocks.Domain.Aggregates.AccountAggregate.StockBalance", b =>
                {
                    b.HasOne("Stocks.Domain.Aggregates.AccountAggregate.Account", null)
                        .WithMany("StockBalances")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocks.Domain.Aggregates.TransactionAggregate.Transaction", b =>
                {
                    b.HasOne("Stocks.Domain.Aggregates.TransactionAggregate.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Stocks.Domain.Aggregates.AccountAggregate.Account", b =>
                {
                    b.Navigation("StockBalances");
                });
#pragma warning restore 612, 618
        }
    }
}
